name: Scrape BTM CSVs

on:
  schedule:
    - cron: '30 20 * * 1-5'   # 20:30 UTC = 14:30 Monterrey (L-V)
  workflow_dispatch:
    inputs:
      symbol:
        description: "Símbolo a scrapear"
        required: true
        default: "SPX"
      strategy:
        description: "Estrategia (Vertical o IronCondor)"
        required: true
        default: "Vertical"
      riesgos:
        description: "Riesgos (conservador,intermedio,agresivo,ultra_agresivo) — vacío = auto"
        required: false
        default: "conservador,intermedio,agresivo,ultra_agresivo"
      horarios:
        description: "Horarios HH:MM — vacío = auto"
        required: false
        default: "10:05,10:10,10:15,10:20,10:25,10:30,10:35,10:40,10:45,10:50,10:55,11:00,11:05,11:10,11:15,11:20,11:25,11:30,11:35,11:40,11:45,11:50,11:55,12:00,12:05,12:10,12:15,12:20,12:25,12:30,12:35,12:40,12:45,12:50,12:55,13:00,13:05,13:10,13:15,13:20,13:25,13:30,13:35,13:40,13:45,13:50,13:55,14:00,14:05,14:10,14:15,14:20,14:25,14:30,14:35,14:40,14:45,14:50,14:55,15:00,15:05,15:10,15:15,15:20,15:25"
      desde:
        description: "YYYY-MM-DD — vacío = hoy"
        required: false
        default: ""
      hasta:
        description: "YYYY-MM-DD — vacío = hoy"
        required: false
        default: ""

permissions:
  contents: write

env:
  TZ: America/Monterrey    # para que `date` use hora de Monterrey
  DEFAULT_SYMBOL: SPX
  DEFAULT_STRATEGY: Vertical
  DEFAULT_RIESGOS: conservador,intermedio,agresivo,ultra_agresivo
  DEFAULT_HORARIOS: "10:05,10:10,10:15,10:20,10:25,10:30,10:35,10:40,10:45,10:50,10:55,11:00,11:05,11:10,11:15,11:20,11:25,11:30,11:35,11:40,11:45,11:50,11:55,12:00,12:05,12:10,12:15,12:20,12:25,12:30,12:35,12:40,12:45,12:50,12:55,13:00,13:05,13:10,13:15,13:20,13:25,13:30,13:35,13:40,13:45,13:50,13:55,14:00,14:05,14:10,14:15,14:20,14:25,14:30,14:35,14:40,14:45,14:50,14:55,15:00,15:05,15:10,15:15,15:20,15:25"

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Unifica parámetros para runs manuales y programados
      - name: Resolve parameters
        shell: bash
        run: |
          # Inputs solo existen en workflow_dispatch; en cron llegan vacíos.
          SYM="${{ github.event.inputs.symbol }}"
          STRAT="${{ github.event.inputs.strategy }}"
          RIES="${{ github.event.inputs.riesgos }}"
          HRS="${{ github.event.inputs.horarios }}"
          DESDE_IN="${{ github.event.inputs.desde }}"
          HASTA_IN="${{ github.event.inputs.hasta }}"

          # Defaults si vienen vacíos
          : "${SYM:=${DEFAULT_SYMBOL}}"
          : "${STRAT:=${DEFAULT_STRATEGY}}"
          : "${RIES:=${DEFAULT_RIESGOS}}"
          : "${HRS:=${DEFAULT_HORARIOS}}"

          # Autorange: si desde/hasta están vacíos → hoy (YYYY-MM-DD) en America/Monterrey
          TODAY="$(date +%F)"
          : "${DESDE_IN:=${TODAY}}"
          : "${HASTA_IN:=${TODAY}}"

          echo "SYMBOL=$SYM"        >> $GITHUB_ENV
          echo "STRATEGY=$STRAT"    >> $GITHUB_ENV
          echo "RIESGOS=$RIES"      >> $GITHUB_ENV
          echo "HORARIOS=$HRS"      >> $GITHUB_ENV
          echo "DESDE=$DESDE_IN"    >> $GITHUB_ENV
          echo "HASTA=$HASTA_IN"    >> $GITHUB_ENV

          echo "✔ Parámetros resueltos:"
          echo "  SYMBOL=$SYM"
          echo "  STRATEGY=$STRAT"
          echo "  RIESGOS=$RIES"
          echo "  HORARIOS=$HRS"
          echo "  DESDE=$DESDE_IN"
          echo "  HASTA=$HASTA_IN"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scraper
        env:
          BTM_EMAIL: ${{ secrets.BTM_EMAIL }}
          BTM_PASSWORD: ${{ secrets.BTM_PASSWORD }}
        run: |
          set -e
          python scraper/btm_scraper.py \
            --symbol "$SYMBOL" \
            --strategy "$STRATEGY" \
            --risks "$RIESGOS" \
            --hours "$HORARIOS" \
            --desde "$DESDE" \
            --hasta "$HASTA" \
            --out-base "data" \
            --pause 0.05

      - name: Commit & push data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [[ -n $(git status --porcelain) ]]; then
            git add -A
            git commit -m "chore(data): update CSVs [skip ci]"
            git push
          else
            echo "No hay cambios para commitear."
          fi

      - name: Upload CSVs as artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: data-csvs
          path: data/
          if-no-files-found: warn

      # ---------- RCLONE A SHAREPOINT ----------
      - name: Install rclone
        if: always()
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      - name: Configure rclone
        if: always()
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          printf "%s\n" "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf
          echo "Remotos configurados:"
          rclone listremotes || true

      - name: Sync data/ to SharePoint work (PowerBI/SPX-Scraper)
        if: always()
        run: |
          REMOTE="sharepoint_work"
          DEST="$REMOTE:PowerBI/SPX-Scraper/"
          echo "Validando remote: $REMOTE"
          if ! rclone listremotes | grep -q "^${REMOTE}:" ; then
            echo "::error::El remote '${REMOTE}' no existe en rclone.conf. Revisa el secreto RCLONE_CONFIG (debe contener [${REMOTE}] …)."
            exit 1
          fi
          echo "Subiendo CSVs a: $DEST"
          rclone copy "data/" "$DEST" \
            --update --fast-list --checkers 8 --transfers 8 \
            --create-empty-src-dirs -v

      # ---------- NOTIFICACIÓN POR CORREO ----------
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: true
          subject: >
            [${{ job.status }}] BTM scrape – ${{ github.repository }} run #${{ github.run_number }}
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
          body: |
            Estado del job:  ${{ job.status }}
            Repo:            ${{ github.repository }}
            Run:             ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Subida a SharePoint: sharepoint_work:/PowerBI/SPX-Scraper/
            Parámetros:
              - symbol:   $SYMBOL
              - strategy: $STRATEGY
              - riesgos:  $RIESGOS
              - horarios: $HORARIOS
              - desde:    $DESDE
              - hasta:    $HASTA
